{"ast":null,"code":"var _jsxFileName = \"/home/bekzat/Documents/Programming/task-management/frontend/src/components/Task/TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { TaskService } from '../../services/taskService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [editingTask, setEditingTask] = useState(null); // Track the task being edited\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const tasks = await TaskService.listTasks();\n      setTasks(tasks);\n    } catch (error) {\n      console.error('Failed to load tasks:', error);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      await TaskService.deleteTask(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n    }\n  };\n  const handleEdit = task => {\n    setEditingTask(task); // Set the task being edited\n  };\n  const handleUpdate = async e => {\n    e.preventDefault();\n    if (!editingTask) return;\n    try {\n      const updatedTask = {\n        title: editingTask.title,\n        description: editingTask.description,\n        priority: editingTask.priority,\n        dueDate: editingTask.dueDate,\n        status: editingTask.status\n      };\n      await TaskService.updateTask(editingTask.id, updatedTask);\n      setEditingTask(null); // Close the edit form\n      fetchTasks(); // Reload tasks\n    } catch (error) {\n      console.error('Failed to update task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEdit(task),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(task.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)), editingTask && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editingTask.title,\n        onChange: e => setEditingTask({\n          ...editingTask,\n          title: e.target.value\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: editingTask.description,\n        onChange: e => setEditingTask({\n          ...editingTask,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditingTask(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"nwiSLkn6Y0JvLhs83lscW/YeAV0=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","TaskService","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","editingTask","setEditingTask","fetchTasks","listTasks","error","console","handleDelete","id","deleteTask","prevTasks","filter","task","handleEdit","handleUpdate","e","preventDefault","updatedTask","title","description","priority","dueDate","status","updateTask","children","map","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/bekzat/Documents/Programming/task-management/frontend/src/components/Task/TaskList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Task, TaskUpdate } from '../../types/task';\nimport { TaskService } from '../../services/taskService';\n\nconst TaskList: React.FC = () => {\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [editingTask, setEditingTask] = useState<Task | null>(null);  // Track the task being edited\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n\n    const fetchTasks = async () => {\n        try {\n            const tasks = await TaskService.listTasks();\n            setTasks(tasks);\n        } catch (error) {\n            console.error('Failed to load tasks:', error);\n        }\n    };\n\n    const handleDelete = async (id: number) => {\n        try {\n            await TaskService.deleteTask(id);\n            setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));\n        } catch (error) {\n            console.error('Failed to delete task:', error);\n        }\n    };\n\n    const handleEdit = (task: Task) => {\n        setEditingTask(task);  // Set the task being edited\n    };\n\n    const handleUpdate = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!editingTask) return;\n\n        try {\n            const updatedTask: TaskUpdate = {\n                title: editingTask.title,\n                description: editingTask.description,\n                priority: editingTask.priority,\n                dueDate: editingTask.dueDate,\n                status: editingTask.status,\n            };\n\n            await TaskService.updateTask(editingTask.id, updatedTask);\n            setEditingTask(null);  // Close the edit form\n            fetchTasks();  // Reload tasks\n        } catch (error) {\n            console.error('Failed to update task:', error);\n        }\n    };\n\n    return (\n        <div>\n            {tasks.map((task) => (\n                <div key={task.id}>\n                    <h3>{task.title}</h3>\n                    <p>{task.description}</p>\n                    <button onClick={() => handleEdit(task)}>Edit</button>\n                    <button onClick={() => handleDelete(task.id)}>Delete</button>\n                </div>\n            ))}\n\n            {editingTask && (\n                <form onSubmit={handleUpdate}>\n                    <input\n                        type=\"text\"\n                        value={editingTask.title}\n                        onChange={(e) =>\n                            setEditingTask({ ...editingTask, title: e.target.value })\n                        }\n                        required\n                    />\n                    <textarea\n                        value={editingTask.description}\n                        onChange={(e) =>\n                            setEditingTask({ ...editingTask, description: e.target.value })\n                        }\n                    />\n                    <button type=\"submit\">Save</button>\n                    <button onClick={() => setEditingTask(null)}>Cancel</button>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}