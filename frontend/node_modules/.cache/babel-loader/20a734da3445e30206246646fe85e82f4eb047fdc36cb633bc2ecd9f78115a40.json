{"ast":null,"code":"var _jsxFileName = \"/home/bekzat/Documents/Programming/task-management/frontend/src/components/Task/TaskForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { TaskService } from '../../services/taskService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  task,\n  onSuccess,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    dueDate: '',\n    priority: 'medium'\n  });\n\n  // Populate form when editing a task\n  useEffect(() => {\n    if (task) {\n      setFormData({\n        title: task.title,\n        description: task.description,\n        dueDate: task.dueDate.slice(0, 16),\n        // Format for input[type=\"datetime-local\"]\n        priority: task.priority\n      });\n    }\n  }, [task]);\n  const formatDueDate = dueDate => {\n    // Ensure the datetime-local value is converted to ISO 8601 format\n    return `${dueDate}:00Z`;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const formattedDueDate = formatDueDate(formData.dueDate);\n      if (task) {\n        // Update existing task\n        const updatedTask = {\n          ...formData,\n          dueDate: formattedDueDate\n        };\n        await TaskService.updateTask(task.id, updatedTask);\n      } else {\n        // Create new task\n        await TaskService.createTask({\n          ...formData,\n          dueDate: formattedDueDate\n        });\n      }\n      setFormData({\n        title: '',\n        description: '',\n        dueDate: '',\n        priority: 'medium'\n      }); // Reset form\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(); // Refresh task list or trigger success callback\n    } catch (error) {\n      console.error('Failed to save task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: formData.title,\n      onChange: e => setFormData({\n        ...formData,\n        title: e.target.value\n      }),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Description\",\n      value: formData.description,\n      onChange: e => setFormData({\n        ...formData,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"datetime-local\",\n      value: formData.dueDate,\n      onChange: e => setFormData({\n        ...formData,\n        dueDate: e.target.value\n      }),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: formData.priority,\n      onChange: e => setFormData({\n        ...formData,\n        priority: e.target.value\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"low\",\n        children: \"Low\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"medium\",\n        children: \"Medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"high\",\n        children: \"High\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: task ? 'Update Task' : 'Create Task'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), onCancel && /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onCancel,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskForm, \"yuA7ZXT2uG4kZYiFroRQ5j1sR7Q=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useEffect","useState","TaskService","jsxDEV","_jsxDEV","TaskForm","task","onSuccess","onCancel","_s","formData","setFormData","title","description","dueDate","priority","slice","formatDueDate","handleSubmit","e","preventDefault","formattedDueDate","updatedTask","updateTask","id","createTask","error","console","onSubmit","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/bekzat/Documents/Programming/task-management/frontend/src/components/Task/TaskForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TaskCreate, TaskUpdate, Task } from '../../types/task';\nimport { TaskService } from '../../services/taskService';\n\ninterface TaskFormProps {\n    task?: Task;  // Optional for editing\n    onSuccess?: () => void;  // Callback when task is created/updated\n    onCancel?: () => void;  // Optional cancel button callback\n}\n\nconst TaskForm: React.FC<TaskFormProps> = ({ task, onSuccess, onCancel }) => {\n    const [formData, setFormData] = useState<TaskCreate>({\n        title: '',\n        description: '',\n        dueDate: '',\n        priority: 'medium',\n    });\n\n    // Populate form when editing a task\n    useEffect(() => {\n        if (task) {\n            setFormData({\n                title: task.title,\n                description: task.description,\n                dueDate: task.dueDate.slice(0, 16),  // Format for input[type=\"datetime-local\"]\n                priority: task.priority,\n            });\n        }\n    }, [task]);\n\n    const formatDueDate = (dueDate: string) => {\n        // Ensure the datetime-local value is converted to ISO 8601 format\n        return `${dueDate}:00Z`;\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        try {\n            const formattedDueDate = formatDueDate(formData.dueDate);\n\n            if (task) {\n                // Update existing task\n                const updatedTask: TaskUpdate = {\n                    ...formData,\n                    dueDate: formattedDueDate,\n                };\n                await TaskService.updateTask(task.id, updatedTask);\n            } else {\n                // Create new task\n                await TaskService.createTask({ ...formData, dueDate: formattedDueDate });\n            }\n\n            setFormData({ title: '', description: '', dueDate: '', priority: 'medium' }); // Reset form\n            onSuccess?.();  // Refresh task list or trigger success callback\n        } catch (error) {\n            console.error('Failed to save task:', error);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                placeholder=\"Title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n            />\n            <textarea\n                placeholder=\"Description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            />\n            <input\n                type=\"datetime-local\"\n                value={formData.dueDate}\n                onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                required\n            />\n            <select\n                value={formData.priority}\n                onChange={(e) =>\n                    setFormData({ ...formData, priority: e.target.value as 'low' | 'medium' | 'high' })\n                }\n            >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n            </select>\n            <button type=\"submit\">{task ? 'Update Task' : 'Create Task'}</button>\n            {onCancel && (\n                <button type=\"button\" onClick={onCancel}>\n                    Cancel\n                </button>\n            )}\n        </form>\n    );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}